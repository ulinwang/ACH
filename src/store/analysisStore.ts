import { create } from 'zustand';
import { subscribeWithSelector } from 'zustand/middleware';
import { persist } from 'zustand/middleware';
import type {
    AnalysisData,
    UIState,
    Hypothesis,
    Evidence,
    Conclusion,
    Milestone,
    UserPreferences
} from '../types';
import {
    DEFAULT_ANALYSIS_DATA,
    DEFAULT_UI_STATE,
    DEFAULT_USER_PREFERENCES
} from '../types';

// 分析数据状态接口
interface AnalysisState {
    data: AnalysisData;
    ui: UIState;
    preferences: UserPreferences;
}

// 分析数据操作接口
interface AnalysisActions {
    // 分析数据操作
    updateTopic: (topic: string) => void;
    updateTitle: (title: string) => void;

    // 假设操作
    addHypothesis: (hypothesis: Omit<Hypothesis, 'id' | 'createdAt' | 'updatedAt'>) => void;
    updateHypothesis: (id: string, updates: Partial<Hypothesis>) => void;
    deleteHypothesis: (id: string) => void;
    reorderHypotheses: (fromIndex: number, toIndex: number) => void;

    // 证据操作
    addEvidence: (evidence: Omit<Evidence, 'id' | 'createdAt' | 'updatedAt'>) => void;
    updateEvidence: (id: string, updates: Partial<Evidence>) => void;
    deleteEvidence: (id: string) => void;

    // 矩阵操作
    updateMatrixScore: (hypothesisId: string, evidenceId: string, score: number) => void;
    clearMatrix: () => void;

    // 结论操作
    addConclusion: (conclusion: Omit<Conclusion, 'id' | 'createdAt' | 'updatedAt'>) => void;
    updateConclusion: (id: string, updates: Partial<Conclusion>) => void;
    deleteConclusion: (id: string) => void;

    // 里程碑操作
    addMilestone: (milestone: Omit<Milestone, 'id' | 'createdAt' | 'updatedAt'>) => void;
    updateMilestone: (id: string, updates: Partial<Milestone>) => void;
    deleteMilestone: (id: string) => void;
    toggleMilestone: (id: string) => void;

    // UI 操作
    setCurrentStep: (step: number) => void;
    setLoading: (loading: boolean) => void;
    setError: (error: string | null) => void;

    // 数据操作
    createNewAnalysis: (topic: string, title?: string) => void;
    resetAnalysis: () => void;
    saveAnalysis: () => void;

    // 敏感性分析操作
    updateSensitivityAnalysis: (analysis: Record<string, any>) => void;

    // 报告操作
    updateReport: (updates: Partial<any>) => void;

    // 偏好操作
    updatePreferences: (updates: Partial<UserPreferences>) => void;
}

// 工具函数
const generateId = (): string => {
    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
};

const createInitialAnalysisData = (topic: string, title?: string): AnalysisData => {
    const now = new Date();
    return {
        id: generateId(),
        title: title || `ACH分析 - ${topic}`,
        topic,
        hypotheses: [],
        evidence: [],
        matrix: {},
        conclusions: [],
        sensitivity: [],
        milestones: [],
        report: {
            id: generateId(),
            title: `${topic} - 分析报告`,
            sections: {
                summary: {
                    id: generateId(),
                    title: '摘要',
                    content: '',
                    isAutoGenerated: false,
                    lastUpdated: now,
                },
                hypotheses: {
                    id: generateId(),
                    title: '假设分析',
                    content: '',
                    isAutoGenerated: false,
                    lastUpdated: now,
                },
                evidence: {
                    id: generateId(),
                    title: '证据评估',
                    content: '',
                    isAutoGenerated: false,
                    lastUpdated: now,
                },
                analysis: {
                    id: generateId(),
                    title: '矩阵分析',
                    content: '',
                    isAutoGenerated: false,
                    lastUpdated: now,
                },
                conclusions: {
                    id: generateId(),
                    title: '结论',
                    content: '',
                    isAutoGenerated: false,
                    lastUpdated: now,
                },
                recommendations: {
                    id: generateId(),
                    title: '建议',
                    content: '',
                    isAutoGenerated: false,
                    lastUpdated: now,
                },
            },
            createdAt: now,
            updatedAt: now,
        },
        metadata: {
            version: '1.0.0',
            createdAt: now,
            updatedAt: now,
        },
    };
};

// 创建 Zustand store
export const useAnalysisStore = create<AnalysisState & AnalysisActions>()(
    subscribeWithSelector(
        persist(
            (set, get) => ({
                // 初始状态
                data: DEFAULT_ANALYSIS_DATA as AnalysisData,
                ui: DEFAULT_UI_STATE,
                preferences: DEFAULT_USER_PREFERENCES,

                // 分析数据操作
                updateTopic: (topic: string) => {
                    set((state) => ({
                        data: {
                            ...state.data,
                            topic,
                            metadata: {
                                ...state.data.metadata,
                                updatedAt: new Date(),
                            },
                        },
                    }));
                },

                updateTitle: (title: string) => {
                    set((state) => ({
                        data: {
                            ...state.data,
                            title,
                            metadata: {
                                ...state.data.metadata,
                                updatedAt: new Date(),
                            },
                        },
                    }));
                },

                // 假设操作
                addHypothesis: (hypothesis) => {
                    const newHypothesis: Hypothesis = {
                        ...hypothesis,
                        id: generateId(),
                        createdAt: new Date(),
                        updatedAt: new Date(),
                    };

                    set((state) => ({
                        data: {
                            ...state.data,
                            hypotheses: [...state.data.hypotheses, newHypothesis],
                            metadata: {
                                ...state.data.metadata,
                                updatedAt: new Date(),
                            },
                        },
                    }));
                },

                updateHypothesis: (id: string, updates: Partial<Hypothesis>) => {
                    set((state) => ({
                        data: {
                            ...state.data,
                            hypotheses: state.data.hypotheses.map(h =>
                                h.id === id ? { ...h, ...updates, updatedAt: new Date() } : h
                            ),
                            metadata: {
                                ...state.data.metadata,
                                updatedAt: new Date(),
                            },
                        },
                    }));
                },

                deleteHypothesis: (id: string) => {
                    set((state) => {
                        const newMatrix = { ...state.data.matrix };
                        // 删除矩阵中相关的评分
                        Object.keys(newMatrix).forEach(key => {
                            if (key.startsWith(`${id}-`)) {
                                delete newMatrix[key];
                            }
                        });

                        return {
                            data: {
                                ...state.data,
                                hypotheses: state.data.hypotheses.filter(h => h.id !== id),
                                matrix: newMatrix,
                                metadata: {
                                    ...state.data.metadata,
                                    updatedAt: new Date(),
                                },
                            },
                        };
                    });
                },

                reorderHypotheses: (fromIndex: number, toIndex: number) => {
                    set((state) => {
                        const newHypotheses = [...state.data.hypotheses];
                        const [removed] = newHypotheses.splice(fromIndex, 1);
                        newHypotheses.splice(toIndex, 0, removed);

                        return {
                            data: {
                                ...state.data,
                                hypotheses: newHypotheses,
                                metadata: {
                                    ...state.data.metadata,
                                    updatedAt: new Date(),
                                },
                            },
                        };
                    });
                },

                // 证据操作
                addEvidence: (evidence) => {
                    const newEvidence: Evidence = {
                        ...evidence,
                        id: generateId(),
                        createdAt: new Date(),
                        updatedAt: new Date(),
                    };

                    set((state) => ({
                        data: {
                            ...state.data,
                            evidence: [...state.data.evidence, newEvidence],
                            metadata: {
                                ...state.data.metadata,
                                updatedAt: new Date(),
                            },
                        },
                    }));
                },

                updateEvidence: (id: string, updates: Partial<Evidence>) => {
                    set((state) => ({
                        data: {
                            ...state.data,
                            evidence: state.data.evidence.map(e =>
                                e.id === id ? { ...e, ...updates, updatedAt: new Date() } : e
                            ),
                            metadata: {
                                ...state.data.metadata,
                                updatedAt: new Date(),
                            },
                        },
                    }));
                },

                deleteEvidence: (id: string) => {
                    set((state) => {
                        const newMatrix = { ...state.data.matrix };
                        // 删除矩阵中相关的评分
                        Object.keys(newMatrix).forEach(key => {
                            if (key.endsWith(`-${id}`)) {
                                delete newMatrix[key];
                            }
                        });

                        return {
                            data: {
                                ...state.data,
                                evidence: state.data.evidence.filter(e => e.id !== id),
                                matrix: newMatrix,
                                metadata: {
                                    ...state.data.metadata,
                                    updatedAt: new Date(),
                                },
                            },
                        };
                    });
                },

                // 矩阵操作
                updateMatrixScore: (hypothesisId: string, evidenceId: string, score: number) => {
                    const key = `${hypothesisId}-${evidenceId}`;
                    set((state) => ({
                        data: {
                            ...state.data,
                            matrix: {
                                ...state.data.matrix,
                                [key]: score,
                            },
                            metadata: {
                                ...state.data.metadata,
                                updatedAt: new Date(),
                            },
                        },
                    }));
                },

                clearMatrix: () => {
                    set((state) => ({
                        data: {
                            ...state.data,
                            matrix: {},
                            metadata: {
                                ...state.data.metadata,
                                updatedAt: new Date(),
                            },
                        },
                    }));
                },

                // 结论操作
                addConclusion: (conclusion) => {
                    const newConclusion: Conclusion = {
                        ...conclusion,
                        id: generateId(),
                        createdAt: new Date(),
                        updatedAt: new Date(),
                    };

                    set((state) => ({
                        data: {
                            ...state.data,
                            conclusions: [...state.data.conclusions, newConclusion],
                            metadata: {
                                ...state.data.metadata,
                                updatedAt: new Date(),
                            },
                        },
                    }));
                },

                updateConclusion: (id: string, updates: Partial<Conclusion>) => {
                    set((state) => ({
                        data: {
                            ...state.data,
                            conclusions: state.data.conclusions.map(c =>
                                c.id === id ? { ...c, ...updates, updatedAt: new Date() } : c
                            ),
                            metadata: {
                                ...state.data.metadata,
                                updatedAt: new Date(),
                            },
                        },
                    }));
                },

                deleteConclusion: (id: string) => {
                    set((state) => ({
                        data: {
                            ...state.data,
                            conclusions: state.data.conclusions.filter(c => c.id !== id),
                            metadata: {
                                ...state.data.metadata,
                                updatedAt: new Date(),
                            },
                        },
                    }));
                },

                // 里程碑操作
                addMilestone: (milestone) => {
                    const newMilestone: Milestone = {
                        ...milestone,
                        id: generateId(),
                        createdAt: new Date(),
                        updatedAt: new Date(),
                    };

                    set((state) => ({
                        data: {
                            ...state.data,
                            milestones: [...state.data.milestones, newMilestone],
                            metadata: {
                                ...state.data.metadata,
                                updatedAt: new Date(),
                            },
                        },
                    }));
                },

                updateMilestone: (id: string, updates: Partial<Milestone>) => {
                    set((state) => ({
                        data: {
                            ...state.data,
                            milestones: state.data.milestones.map(m =>
                                m.id === id ? { ...m, ...updates, updatedAt: new Date() } : m
                            ),
                            metadata: {
                                ...state.data.metadata,
                                updatedAt: new Date(),
                            },
                        },
                    }));
                },

                deleteMilestone: (id: string) => {
                    set((state) => ({
                        data: {
                            ...state.data,
                            milestones: state.data.milestones.filter(m => m.id !== id),
                            metadata: {
                                ...state.data.metadata,
                                updatedAt: new Date(),
                            },
                        },
                    }));
                },

                toggleMilestone: (id: string) => {
                    set((state) => ({
                        data: {
                            ...state.data,
                            milestones: state.data.milestones.map(m =>
                                m.id === id ? { ...m, isCompleted: !m.isCompleted, updatedAt: new Date() } : m
                            ),
                            metadata: {
                                ...state.data.metadata,
                                updatedAt: new Date(),
                            },
                        },
                    }));
                },

                // UI 操作
                setCurrentStep: (step: number) => {
                    set((state) => ({
                        ui: { ...state.ui, currentStep: step },
                    }));
                },

                setLoading: (loading: boolean) => {
                    set((state) => ({
                        ui: { ...state.ui, isLoading: loading },
                    }));
                },

                setError: (error: string | null) => {
                    set((state) => ({
                        ui: { ...state.ui, error },
                    }));
                },

                // 数据操作
                createNewAnalysis: (topic: string, title?: string) => {
                    const newData = createInitialAnalysisData(topic, title);
                    set(() => ({
                        data: newData,
                        ui: { ...DEFAULT_UI_STATE, currentStep: 0 },
                    }));
                },

                resetAnalysis: () => {
                    set(() => ({
                        data: DEFAULT_ANALYSIS_DATA as AnalysisData,
                        ui: DEFAULT_UI_STATE,
                    }));
                },

                saveAnalysis: () => {
                    // 保存分析数据到localStorage或发送到服务器
                    // 这里简单地更新时间戳表示保存
                    set((state) => ({
                        data: {
                            ...state.data,
                            metadata: {
                                ...state.data.metadata,
                                updatedAt: new Date(),
                            },
                        },
                    }));
                },

                // 敏感性分析操作
                updateSensitivityAnalysis: (analysis: Record<string, any>) => {
                    set((state) => ({
                        data: {
                            ...state.data,
                            sensitivity: state.data.sensitivity.map(s => ({ ...s, ...analysis })),
                            metadata: {
                                ...state.data.metadata,
                                updatedAt: new Date(),
                            },
                        },
                    }));
                },

                // 报告操作
                updateReport: (updates: Partial<any>) => {
                    set((state) => ({
                        data: {
                            ...state.data,
                            report: {
                                ...state.data.report,
                                ...updates,
                                updatedAt: new Date(),
                            },
                            metadata: {
                                ...state.data.metadata,
                                updatedAt: new Date(),
                            },
                        },
                    }));
                },

                // 偏好操作
                updatePreferences: (updates: Partial<UserPreferences>) => {
                    set((state) => ({
                        preferences: { ...state.preferences, ...updates },
                    }));
                },
            }),
            {
                name: 'ach-analysis-store',
                partialize: (state) => ({
                    data: state.data,
                    preferences: state.preferences,
                }),
            }
        )
    )
);

// 导出选择器 hooks
export const useAnalysisData = () => useAnalysisStore(state => state.data);
export const useUIState = () => useAnalysisStore(state => state.ui);
export const useUserPreferences = () => useAnalysisStore(state => state.preferences);
export const useHypotheses = () => useAnalysisStore(state => state.data.hypotheses);
export const useEvidence = () => useAnalysisStore(state => state.data.evidence);
export const useMatrix = () => useAnalysisStore(state => state.data.matrix);
export const useConclusions = () => useAnalysisStore(state => state.data.conclusions);
export const useMilestones = () => useAnalysisStore(state => state.data.milestones); 